###################################################
# 
# I'm using a proxy (Traefik) to route requests depending on the service
# being requested. All requests to /api will be sent to the 
# backend service while all other requests will be sent to the client service.
# There might be some overlap in the routing rules but no worries as the proxy
# will determine the service based on the most specific rule.
#
###################################################

services:

  proxy:
    image: traefik:v2.11
    command: --providers.docker
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  ###################################################
  # Backend service. This is the Node.js server that provides the API for the app.
  #
  # All requests to localhost/api/* will be forwarded to this service's port 3000.
  # I use labels to achieve that
  ###################################################
  backend:
    build:
      context: ./
      target: backend-dev
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DB: ${DB_DATABASE}
    develop:
      watch:
        - path: ./backend/src
          action: sync
          target: /usr/local/app/src
        - path: ./backend/package.json
          action: rebuild
    labels:
      traefik.http.routers.backend.rule: Host(`localhost`) && PathPrefix(`/api`)
      traefik.http.services.backend.loadbalancer.server.port: 3000

  ###################################################
  # Client service
  #
  # This is the React app that provides the frontend for the app.
  # 
  # All requests to localhost will be forwarded to this service's port 5173.
  ###################################################
  client:
    build:
      context: ./
      target: client-dev
    develop:
      watch:
        - path: ./client/src
          action: sync
          target: /usr/local/app/src
        - path: ./client/package.json
          action: rebuild
    labels:
      traefik.http.routers.client.rule: Host(`localhost`)
      traefik.http.services.client.loadbalancer.server.port: 5173


  ###################################################
  # Mysql service
  #
  # This service provides the database for the application.
  ###################################################
  mysql:
    image: mysql:8.0
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment: 
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}

  ###################################################
  # Phpmyadmin service
  #
  # This is a web interface to the MySQL database.
  # I configured it to open directly without needing us to login by using the MySQL
  # username and password environment variables.
  #
  # All requests to db.localhost will be forwarded to this service's port 80.
  ###################################################
  phpmyadmin:
    image: arm64v8/phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_USER: ${DB_USERNAME}
      PMA_PASSWORD: ${DB_PASSWORD}
    ports:
      - 3000:80
    labels:
      traefik.http.routers.phpmyadmin.rule: Host(`db.localhost`)
      traefik.http.services.phpmyadmin.loadbalancer.server.port: 80

###################################################
# Volumes is used to persist the data for the MySQL service.
# We can clear this data by deleting the volume
###################################################
volumes:
  todo-mysql-data:
